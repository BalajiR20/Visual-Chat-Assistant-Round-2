import os
import cv2
import sqlite3
import streamlit as st
from PIL import Image
import google.generativeai as genai
from datetime import datetime
import uuid
import shutil
from dotenv import load_dotenv
from fpdf import FPDF

# -------------------- Initial App Configuration --------------------
st.set_page_config(
    layout="wide",
    page_title="AI Video Analyzer",
    page_icon="🎥"
)
st.markdown("""
<style>
/* Keep original app background */
[data-testid="stAppViewContainer"] {
    background: none !important;
}

/* Gradient title styling */
h1, h2, h3 {
    background: linear-gradient(90deg, #ff9966, #ff5e62);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 800;
    animation: fadeSlideIn 0.6s ease forwards;
}

/* Section headers with background panels */
.section-header {
    background: linear-gradient(45deg, rgba(255, 153, 102, 0.15), rgba(255, 94, 98, 0.15));
    padding: 12px 18px;
    border-radius: 10px;
    font-weight: 600;
    color: #ff5e62;
}

/* Card styling */
.stContainer {
    background: rgba(255, 255, 255, 0.95) !important;
    border-radius: 15px;
    padding: 20px !important;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08) !important;
    border: 1px solid rgba(0, 0, 0, 0.05) !important;
    transition: transform 0.2s ease-in-out;
}
.stContainer:hover {
    transform: translateY(-3px);
}

/* Gradient buttons */
.stButton>button {
    border-radius: 12px;
    border: none !important;
    background: linear-gradient(45deg, #ff9966, #ff5e62) !important;
    color: white !important;
    font-weight: 600 !important;
    transition: all 0.3s ease;
    cursor: pointer !important;
}
.stButton>button:hover {
    transform: scale(1.05);
    box-shadow: 0px 4px 15px rgba(255, 94, 98, 0.5);
}

/* Pointer cursor for chat send arrow */
[data-testid="stChatInput"] button {
    cursor: pointer !important;
}

/* Chat bubbles */
[data-testid="stChatMessage"] {
    padding: 12px 16px;
    border-radius: 15px !important;
    margin: 8px 0;
    max-width: 80%;
    animation: fadeIn 0.3s ease-in-out;
}
[data-testid="stChatMessage"][aria-label="user"] {
    background: linear-gradient(45deg, #36d1dc, #5b86e5) !important;
    color: white !important;
    margin-left: auto;
}
[data-testid="stChatMessage"][aria-label="assistant"] {
    background: rgba(255, 255, 255, 0.9) !important;
    border: 1px solid rgba(0, 0, 0, 0.1);
}

/* File uploader */
[data-testid="stFileUploader"] {
    border: 2px dashed rgba(255, 94, 98, 0.5) !important;
    border-radius: 15px !important;
    padding: 20px !important;
    transition: background 0.3s ease-in-out;
}
[data-testid="stFileUploader"]:hover {
    background: rgba(255, 255, 255, 1) !important;
}

/* Scrollbar styling */
::-webkit-scrollbar {
    width: 8px;
}
::-webkit-scrollbar-thumb {
    background: rgba(255, 94, 98, 0.6);
    border-radius: 4px;
}

/* Animations */
@keyframes fadeSlideIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}
@keyframes fadeIn {
    from {opacity: 0;}
    to {opacity: 1;}
}
</style>
""", unsafe_allow_html=True)


# 🔐 Load API Key from .env file
load_dotenv()
try:
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
except (AttributeError, TypeError):
    st.error("🚨 Gemini API Key not found. Please create a `.env` file with `GEMINI_API_KEY='your_key'`.", icon="🚨")
    st.stop()


# -------------------- Helper Functions --------------------

# -------------------- Helper Functions --------------------

def create_pdf(text: str):
    """
    Creates a nicely formatted PDF with heading and better spacing.
    Compatible with fpdf2 and Streamlit.
    """
    pdf = FPDF()
    pdf.add_page()

    # Title
    pdf.set_font("Helvetica", style="B", size=18)
    pdf.cell(0, 10, "Video Summary", ln=True, align="C")
    pdf.ln(10)  # extra spacing after title

    # Main content
    pdf.set_font("Helvetica", size=12)
    text_to_write = text.encode('latin-1', 'replace').decode('latin-1')
    pdf.multi_cell(0, 8, text_to_write, align="J")  # "J" = justified text

    # Footer
    pdf.ln(5)
    pdf.set_font("Helvetica", size=10, style="I")
    pdf.cell(0, 10, "Generated by AI Video Analyzer", align="C")

    # Output as bytes
    pdf_data = pdf.output(dest='S')
    if isinstance(pdf_data, bytearray):
        pdf_data = bytes(pdf_data)
    elif isinstance(pdf_data, str):
        pdf_data = pdf_data.encode('latin-1')

    return pdf_data

# --- DB & Session Management ---
def init_session_db(session_id):
    """Initialize database for a specific session."""
    db_file = f"sessions/session_{session_id}.db"
    os.makedirs("sessions", exist_ok=True)
    conn = sqlite3.connect(db_file, check_same_thread=False)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS chat (timestamp TEXT, sender TEXT, message TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS summaries (timestamp TEXT, summary TEXT)''')
    conn.commit()
    conn.close()

def get_all_sessions():
    """Get all existing session IDs."""
    if not os.path.exists("sessions"):
        return []
    return sorted(
        [f.replace("session_", "").replace(".db", "") for f in os.listdir("sessions") if f.endswith(".db")],
        reverse=True
    )

def save_chat(session_id, sender, message):
    db_file = f"sessions/session_{session_id}.db"
    conn = sqlite3.connect(db_file, check_same_thread=False)
    c = conn.cursor()
    c.execute("INSERT INTO chat VALUES (?, ?, ?)", (datetime.now().isoformat(), sender, message))
    conn.commit()
    conn.close()

def load_chat(session_id):
    db_file = f"sessions/session_{session_id}.db"
    if not os.path.exists(db_file): return []
    conn = sqlite3.connect(db_file, check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT sender, message FROM chat ORDER BY timestamp ASC")
    rows = c.fetchall()
    conn.close()
    return rows

def save_summary(session_id, summary_text):
    db_file = f"sessions/session_{session_id}.db"
    conn = sqlite3.connect(db_file, check_same_thread=False)
    c = conn.cursor()
    c.execute("DELETE FROM summaries")
    c.execute("INSERT INTO summaries VALUES (?, ?)", (datetime.now().isoformat(), summary_text))
    conn.commit()
    conn.close()

def load_latest_summary(session_id):
    db_file = f"sessions/session_{session_id}.db"
    if not os.path.exists(db_file): return None
    conn = sqlite3.connect(db_file, check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT summary FROM summaries ORDER BY timestamp DESC LIMIT 1")
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

def delete_session(session_id):
    """Delete a session's DB and video files."""
    db_file = f"sessions/session_{session_id}.db"
    if os.path.exists(db_file): os.remove(db_file)
    video_dir = f"sessions/videos/{session_id}"
    if os.path.exists(video_dir): shutil.rmtree(video_dir)

# --- AI & Video Processing ---
class GeminiAgent:
    """A wrapper for the Gemini generative model."""
    def __init__(self, model_name="models/gemini-2.0-flash-exp"):
        self.model = genai.GenerativeModel(model_name)

    def generate_response(self, content):
        """Generates a response from the model."""
        response = self.model.generate_content(content)
        return response.text

def extract_frames(video_path, interval_sec=2, max_frames=12, target_size=(1280, 720)):
    """Extracts and resizes frames from a video, returning PIL Image objects."""
    pil_images = []
    cap = cv2.VideoCapture(video_path)
    fps = cap.get(cv2.CAP_PROP_FPS)
    frame_interval = int(fps * interval_sec) if fps > 0 else 1
    frame_num = 0

    while cap.isOpened() and len(pil_images) < max_frames:
        ret, frame = cap.read()
        if not ret:
            break
        if frame_num % frame_interval == 0:
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            pil_img = Image.fromarray(frame_rgb)
            pil_img.thumbnail(target_size)
            pil_images.append(pil_img)
        frame_num += 1
    cap.release()
    return pil_images

# -------------------- Streamlit UI Application --------------------

# Initialize session state
if 'current_session' not in st.session_state:
    st.session_state.current_session = None
if 'video_summary' not in st.session_state:
    st.session_state.video_summary = None
if 'video_path' not in st.session_state:
    st.session_state.video_path = None

# --- Sidebar for Session Management ---
with st.sidebar:
    st.title("⚙️ Sessions")

    if st.button("➕ New Session", use_container_width=True, type="primary"):
        new_id = str(uuid.uuid4())[:8]
        st.session_state.current_session = new_id
        init_session_db(new_id)
        st.session_state.video_summary = None
        st.session_state.video_path = None
        st.rerun()

    st.divider()

    sessions = get_all_sessions()
    if sessions:
        try:
            current_index = sessions.index(st.session_state.current_session) if st.session_state.current_session in sessions else 0
        except ValueError:
            current_index = 0
            
        selected_session = st.selectbox("📋 Your Sessions", sessions, index=current_index)

        if st.session_state.current_session != selected_session:
            st.session_state.current_session = selected_session
            st.session_state.video_summary = load_latest_summary(selected_session)
            st.session_state.video_path = None
            st.rerun()

        st.markdown(f"**Active Session:** `{st.session_state.current_session}`")

        if st.button("🗑️ Delete Current Session", use_container_width=True, type="secondary"):
            delete_session(st.session_state.current_session)
            st.session_state.current_session = None
            st.session_state.video_summary = None
            st.session_state.video_path = None
            st.rerun()
    else:
        st.info("No sessions yet. Start a new one!")

# --- Main Content Area ---
st.title("🎥 AI Video Analyzer & Chatbot")
st.markdown("Upload a video to get a detailed summary and then ask questions about the content.")

if not st.session_state.current_session:
    st.info("👋 Welcome! Create a new session from the sidebar to get started.")
    st.stop()

# --- Main Layout: Two Columns for Video and Chat ---
col_video, col_chat = st.columns(2, gap="large")

session_id = st.session_state.current_session
init_session_db(session_id)

with col_video:
    with st.container(border=True):
        st.subheader("1. Upload Your Video")
        uploaded_video = st.file_uploader("Select an MP4 video", type=["mp4"])

        if uploaded_video:
            st.video(uploaded_video)
            
            session_video_dir = f"sessions/videos/{session_id}"
            os.makedirs(session_video_dir, exist_ok=True)
            video_path = os.path.join(session_video_dir, uploaded_video.name)
            with open(video_path, "wb") as f:
                f.write(uploaded_video.read())
            st.session_state.video_path = video_path

        st.subheader("2. Generate Summary")
        if st.button("Analyze Video", disabled=not st.session_state.get('video_path'), use_container_width=True):
            with st.spinner("Processing video..."):
                try:
                    pil_images = extract_frames(st.session_state.video_path, interval_sec=2, max_frames=12)
                    if not pil_images:
                        st.error("Could not extract frames. Is the video file valid?")
                        st.stop()
                    
                    prompt = """
                    Carefully observe this video sequence and provide a detailed narrative that describes everything visible throughout the sequence. Avoid frame-by-frame labeling — instead, narrate the entire sequence naturally, capturing the flow of events and transitions. Include all visible objects, people, cars, signs, environmental elements, and their relative positions (left, center, right; top, middle, bottom). Explain sizes, orientations, colors, and any movements or interactions. Highlight human actions, clothing, expressions, and what devices or objects they are using. Mention all text on signs, banners, or vehicles, and describe the setting in full detail (weather, lighting, background structures, crowd behavior, etc). Leave nothing out — even the smallest detail may be important. Your goal is to deliver a coherent and exhaustive scene description, rich with spatial and temporal context.
                    """
                    
                    message_content = [prompt] + pil_images
                    agent = GeminiAgent()
                    summary = agent.generate_response(message_content)

                    st.session_state.video_summary = summary
                    save_summary(session_id, summary)
                    st.success("Analysis complete!")

                except Exception as e:
                    st.error(f"An error occurred: {e}")

        # --- Display Summary and Download Buttons ---
        latest_summary = st.session_state.video_summary or load_latest_summary(session_id)
        if latest_summary:
            st.subheader("3. View & Download Summary")
            
            # --- Download Buttons ---
            dl_col1, dl_col2 = st.columns(2)
            with dl_col1:
                st.download_button(
                    label="📄 Download as TXT",
                    data=latest_summary.encode('utf-8'),
                    file_name=f"summary_{session_id}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            with dl_col2:
                try:
                    # Pass only the text to the create_pdf function
                    pdf_bytes = create_pdf(latest_summary)
                    st.download_button(
                        label="📑 Download as PDF",
                        data=pdf_bytes,
                        file_name=f"summary_{session_id}.pdf",
                        mime="application/pdf",
                        use_container_width=True
                    )
                except Exception as e:
                    st.error(f"PDF generation failed: {e}", icon="⚠️")

            # --- Summary Expander ---
            with st.expander("📝 View Full Summary", expanded=True):
                st.markdown(latest_summary)

with col_chat:
    with st.container(border=True):
        st.subheader(f"💬 Chat with AI about the Video")
        st.markdown("Ask questions about the summarized video content below.")
        
        chat_container = st.container(height=500)
        chat_history = load_chat(session_id)
        with chat_container:
            for sender, msg in chat_history:
                avatar = '🤖' if sender.lower() == "gemini" else "😄"
                with st.chat_message(sender, avatar=avatar):
                    st.markdown(msg)

        if user_prompt := st.chat_input("Ask a question..."):
            with chat_container:
                with st.chat_message("user", avatar="😄"):
                    st.markdown(user_prompt)

            video_summary = st.session_state.video_summary or load_latest_summary(session_id)
            history_context = "\n".join([f"{s.capitalize()}: {m}" for s, m in chat_history[-4:]])
            
            full_prompt_parts = []
            if video_summary:
                context_prompt = f"**Video Summary Context:**\n{video_summary}\n\n**Recent Conversation:**\n{history_context}\n\n**User's New Question:**\n{user_prompt}"
                full_prompt_parts.append(context_prompt)
            else:
                 full_prompt_parts.append(f"The user has asked: {user_prompt}. Please respond, noting that no video has been analyzed yet.")

            with st.spinner("🤖 Thinking..."):
                agent = GeminiAgent()
                response = agent.generate_response(full_prompt_parts)

            with chat_container:
                with st.chat_message("gemini", avatar="🤖"):
                    st.markdown(response)

            save_chat(session_id, "user", user_prompt)
            save_chat(session_id, "gemini", response)
            st.rerun()